CREATE DATABASE  IF NOT EXISTS `coe` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `coe`;
-- MySQL dump 10.13  Distrib 8.0.34, for macos13 (arm64)
--
-- Host: localhost    Database: coe
-- ------------------------------------------------------
-- Server version	8.0.40

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `question` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `answer` text,
  `level` varchar(255) DEFAULT NULL,
  `question_string` text,
  `topic` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=381 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question`
--

LOCK TABLES `question` WRITE;
/*!40000 ALTER TABLE `question` DISABLE KEYS */;
INSERT INTO `question` VALUES (40,' Java is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. ','Beginner',' What is Java?                                                                  ','Core Java'),(41,' Key features include object-oriented, platform-independent, simple, secure, robust, multithreaded, and distributed.        ','Beginner',' What are the main features of Java?                                            ','Core Java'),(42,' The Java Development Kit (JDK) is a software development kit used to develop Java applications. It includes the JRE, compiler, and other tools. ','Beginner',' What is the JDK?                                                                ','Core Java'),(43,' The Java Virtual Machine (JVM) is a virtual machine that enables a computer to run Java programs by translating Java bytecode into machine language. ','Beginner',' What is the JVM?                                                                ','Core Java'),(44,' A class is a blueprint for creating objects. It defines a datatype by bundling data and methods that work on the data into one single unit. ','Beginner',' What is a class in Java?                                                        ','Core Java'),(45,' `==` checks for reference equality (whether two references point to the same object), while `equals()` checks for logical equality (whether two objects are meaningfully equivalent). ','Intermediate',' What is the difference between `==` and `equals()` in Java?                     ','Core Java'),(46,' Inheritance is a mechanism where a new class is derived from an existing class, inheriting fields and methods from the existing class. ','Intermediate',' What is inheritance in Java?                                                    ','Core Java'),(47,' Polymorphism allows objects to be treated as instances of their parent class rather than their actual class. It allows methods to do different things based on the object it is acting upon. ','Intermediate',' What is polymorphism in Java?                                                   ','Core Java'),(48,' Encapsulation is the practice of wrapping the data (variables) and the code (methods) together as a single unit, known as a class. It restricts direct access to some of an object\'s components. ','Intermediate',' What is encapsulation in Java?                                                   ','Core Java'),(49,' An abstract class is a class that cannot be instantiated on its own and may contain abstract methods that must be implemented by subclasses. ','Intermediate',' What is an abstract class?                                                       ','Core Java'),(50,' `ArrayList` uses a dynamic array to store elements and is better for fast random access, while `LinkedList` uses a doubly linked list and is better for insertions and deletions. ','Expert',' What is the difference between `ArrayList` and `LinkedList` in Java?              ','Core Java'),(51,' `HashMap` is a part of Java’s collection framework that stores key-value pairs. It uses a hash table to store data, which allows for fast retrieval based on the key. ','Expert',' What is a `HashMap` and how does it work?                                        ','Core Java'),(52,' Access modifiers include `public`, `protected`, `private`, and default (package-private), which control the visibility of classes, methods, and variables. ','Expert',' What are Java\'s access modifiers?                                                ','Core Java'),(53,' The `transient` keyword is used to indicate that a field should not be serialized. It prevents the serialization of the variable’s value. ','Expert',' What is the `transient` keyword in Java?                                         ','Core Java'),(54,' `synchronized` is a keyword used to control access to code blocks by multiple threads, whereas `Lock` provides more flexible thread synchronization mechanisms. ','Expert',' What are the main differences between `synchronized` and `Lock` in Java?          ','Core Java'),(55,' A deadlock is a situation in which two or more threads are blocked forever, waiting for each other to release resources. ','Expert',' What is a `deadlock` in Java?                                                     ','Core Java'),(56,' Java Streams represent a sequence of elements and support operations that can be pipelined to produce a result. They are used to process collections of objects. ','Expert',' What are `Java Streams` and how do they work?                                    ','Core Java'),(57,' Garbage collection is the process of automatically identifying and reclaiming memory occupied by objects that are no longer in use to prevent memory leaks. ','Expert',' Explain the concept of `garbage collection` in Java.                             ','Core Java'),(58,' Lambda expressions provide a clear and concise way to represent one method interface using an expression. They are used primarily to enable functional programming in Java. ','Expert',' What are `Lambda expressions` and why are they used in Java?                      ','Core Java'),(59,' The Java Memory Model defines how threads interact through memory and what behavior is allowed when multiple threads access shared variables. ','Expert',' What is `Java Memory Model` (JMM)?                                               ','Core Java'),(60,' Java Reflection allows the program to examine or modify the runtime behavior of applications, including accessing private fields and methods. ','Expert',' What is `Java Reflection`?                                                        ','Core Java'),(61,' A functional interface is an interface that has exactly one abstract method, which can be implemented using lambda expressions or method references. ','Expert',' What are `functional interfaces` in Java?                                        ','Core Java'),(62,' OOP is a programming paradigm based on the concept of objects, which can contain data and code. It promotes concepts like encapsulation, inheritance, and polymorphism. ','Beginner',' What is Object-Oriented Programming (OOP)?                            ','OOPS'),(63,' The main principles are Encapsulation, Inheritance, Polymorphism, and Abstraction.                             ','Beginner',' What are the main principles of OOP?                                  ','OOPS'),(64,' Encapsulation is the concept of wrapping data (attributes) and methods (functions) together as a single unit or class. It hides the internal state and requires all interactions to be performed through an object\'s methods. ','Beginner',' What is Encapsulation?                                                ','OOPS'),(65,' Inheritance is a mechanism by which one class can inherit the properties and methods of another class. This promotes code reuse and establishes a relationship between classes. ','Beginner',' What is Inheritance?                                                   ','OOPS'),(66,' Polymorphism allows objects to be treated as instances of their parent class rather than their actual class. It enables methods to have different implementations based on the object calling them. ','Beginner',' What is Polymorphism?                                                  ','OOPS'),(67,' Abstraction is the process of hiding the complex implementation details and showing only the essential features of the object. It helps in reducing complexity and increasing efficiency. ','Intermediate',' What is Abstraction in OOP?                                            ','OOPS'),(68,' A class is a blueprint or template for creating objects. It defines a datatype by bundling data and methods that work on the data into one single unit.                      ','Intermediate',' What is a Class?                                                        ','OOPS'),(69,' An object is an instance of a class. It represents a specific realization of the class with actual values. Objects interact with each other and can hold data and perform actions. ','Intermediate',' What is an Object?                                                      ','OOPS'),(70,' An abstract class can have both abstract methods (without implementations) and concrete methods (with implementations), while an interface can only have abstract methods (in Java 7 and earlier). In Java 8 and later, interfaces can have default methods. ','Intermediate',' What is the difference between `abstract class` and `interface`?        ','OOPS'),(71,' Method Overloading is a feature that allows a class to have more than one method with the same name, but with different parameters (type, number, or both). This is used to increase the readability of the program. ','Intermediate',' What is Method Overloading?                                             ','OOPS'),(72,' Method Overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass. The method signature must be the same as in the superclass. ','Intermediate',' What is Method Overriding?                                              ','OOPS'),(73,' Constructor Overloading is similar to method overloading, where a class can have more than one constructor with different parameter lists. Each constructor performs different tasks based on the parameters passed. ','Intermediate',' What is Constructor Overloading?                                        ','OOPS'),(74,' The `super` keyword is used to refer to the immediate parent class object. It can be used to access parent class methods and constructors. ','Intermediate',' What is the use of the `super` keyword?                                ','OOPS'),(75,' The `this` keyword refers to the current instance of a class. It is used to distinguish between instance variables and parameters with the same name and to invoke other constructors of the same class. ','Intermediate',' What is `this` keyword in Java?                                         ','OOPS'),(76,' Composition is a design principle where one class contains another class as a member, allowing the creation of complex types by combining objects of other classes. ','Intermediate',' What is Composition in OOP?                                             ','OOPS'),(77,' Aggregation is a special form of association where the child class can exist independently of the parent class. It represents a \"has-a\" relationship but without strong dependency. ','Intermediate',' What is Aggregation in OOP?                                             ','OOPS'),(78,' Composition represents a \"has-a\" relationship where one class contains another, whereas inheritance represents an \"is-a\" relationship where one class inherits properties and behaviors from another. ','Intermediate',' What is the difference between `composition` and `inheritance`?         ','OOPS'),(79,' The `final` keyword is used to define constants, prevent method overriding, and inheritance of classes. When a variable is declared as `final`, its value cannot be changed. When a method is `final`, it cannot be overridden. When a class is `final`, it cannot be subclassed. ','Expert',' What is a `final` keyword in Java?                                      ','OOPS'),(80,' A `static` method belongs to the class rather than any instance of the class. It can be called without creating an object of the class and can only access other static members. ','Expert',' What is a `static` method?                                              ','OOPS'),(81,' Abstract methods in an abstract class do not have implementations and must be implemented by subclasses. They define a contract that the subclasses must follow. ','Expert',' What is the role of `abstract` methods in an abstract class?            ','OOPS'),(82,' Overloading involves having multiple methods with the same name but different parameters in the same class. Overriding involves redefining a method in a subclass that already exists in the superclass, allowing for a specific implementation. ','Expert',' What is the difference between `overloading` and `overriding` in Java?    ','OOPS'),(83,' The `instanceof` operator checks if an object is an instance of a specific class or subclass, or implements a specific interface. It is used to test object types at runtime. ','Expert',' What is the `instanceof` operator in Java?                                ','OOPS'),(84,' Dynamic Binding refers to the runtime process of linking method calls to their respective method definitions. It allows for method overriding and polymorphic behavior. ','Expert',' What is `Dynamic Binding` (Late Binding)?                                ','OOPS'),(85,' Duck Typing is a concept where the type or class of an object is determined by its behavior (methods and properties) rather than its explicit class definition. This is more common in dynamically-typed languages. ','Expert',' What is `Duck Typing`?                                                    ','OOPS'),(86,' The Prototype design pattern involves creating new objects by copying an existing object, known as the prototype. This pattern is used when creating a new object is costly or complex. ','Expert',' What is the `Prototype` design pattern?                                  ','OOPS'),(87,' The Singleton design pattern ensures that a class has only one instance and provides a global point of access to that instance. This is often used for configuration or resource management. ','Expert',' What is the `Singleton` design pattern?                                   ','OOPS'),(88,' Composition Over Inheritance is a design principle that suggests using composition (creating objects from other objects) instead of inheritance to achieve code reuse and flexibility. ','Expert',' What is `Composition Over Inheritance`?                                   ','OOPS'),(89,' The Observer design pattern defines a one-to-many dependency between objects, where a change in one object (subject) triggers updates in all dependent objects (observers). ','Expert',' What is the `Observer` design pattern?                                    ','OOPS'),(90,' Dependency Injection is a design pattern where an object\'s dependencies are provided to it by an external source rather than the object creating them itself. This promotes loose coupling and easier testing. ','Expert',' What is `Dependency Injection` (DI)?                                      ','OOPS'),(91,' The Java Collections Framework is a set of classes and interfaces that implement commonly reusable collection data structures. It provides a way to store and manipulate groups of objects. ','Beginner',' What is the Java Collections Framework?                                                           ','Collections'),(92,' The main interfaces are `Collection`, `List`, `Set`, `Queue`, and `Map`.                                                                 ','Beginner',' What are the main interfaces in the Java Collections Framework?                                 ','Collections'),(93,' `List` allows duplicate elements and maintains insertion order, while `Set` does not allow duplicates and does not guarantee order (unless it\'s a `SortedSet`). ','Beginner',' What is the difference between `List` and `Set` in Java?                                          ','Collections'),(94,' A `Map` is an object that maps keys to values. It does not allow duplicate keys, but each key maps to exactly one value. Examples include `HashMap` and `TreeMap`. ','Beginner',' What is a `Map` in Java?                                                                         ','Collections'),(95,' `ArrayList` is a resizable array implementation of the `List` interface. It allows for dynamic resizing and provides fast random access to elements. ','Beginner',' What is an `ArrayList` in Java?                                                                  ','Collections'),(96,' `HashSet` is an implementation of the `Set` interface that uses a hash table. It does not allow duplicate elements and does not guarantee any specific order. ','Intermediate',' What is a `HashSet` and how does it work?                                                        ','Collections'),(97,' `HashSet` does not maintain any order, while `LinkedHashSet` maintains insertion order by using a linked list. ','Intermediate',' What is the difference between `HashSet` and `LinkedHashSet`?                                     ','Collections'),(98,' `TreeSet` is a `NavigableSet` that uses a red-black tree to store elements. It maintains a sorted order and does not allow duplicate elements. ','Intermediate',' What is a `TreeSet` in Java?                                                                     ','Collections'),(99,' `HashMap` uses a hash table to store key-value pairs. It calculates the hash code of keys to determine where to store values. It allows null values and keys. ','Intermediate',' How does a `HashMap` work?                                                                       ','Collections'),(100,' `HashMap` is not thread-safe and can be used in non-concurrent contexts. `ConcurrentHashMap` is thread-safe and allows concurrent access by multiple threads. ','Intermediate',' What is the difference between `HashMap` and `ConcurrentHashMap`?                                ','Collections'),(101,' `Collections.synchronizedMap()` returns a synchronized (thread-safe) map backed by the specified map. It is used to ensure thread safety when multiple threads access the map. ','Intermediate',' What is `Collections.synchronizedMap()`?                                                        ','Collections'),(102,' `PriorityQueue` is a queue that orders its elements based on their natural ordering or by a `Comparator` provided at queue construction time. ','Intermediate',' What is the `PriorityQueue` class in Java?                                                       ','Collections'),(103,' `Deque` is a double-ended queue that supports insertion and removal at both ends. Classes that implement `Deque` include `ArrayDeque` and `LinkedList`. ','Intermediate',' What is a `Deque` and which classes implement it?                                                ','Collections'),(104,' `Vector` is a synchronized implementation of a `List` that maintains the order of elements. It is considered obsolete in modern applications in favor of `ArrayList`. ','Intermediate',' What is the `Vector` class?                                                                      ','Collections'),(105,' `ArrayList` uses a dynamic array for storage and provides fast random access. `LinkedList` uses a doubly linked list and provides better performance for insertions and deletions. ','Intermediate',' What is the difference between `ArrayList` and `LinkedList`?                                      ','Collections'),(106,' `NavigableMap` is a subtype of `SortedMap` that provides navigation methods to find the closest matches for given search targets. `TreeMap` is a common implementation of `NavigableMap`. ','Expert',' What is the `NavigableMap` interface?                                                            ','Collections'),(107,' `LinkedHashMap` maintains insertion order by using a linked list to maintain a doubly-linked list of entries. This allows for predictable iteration order. ','Expert',' How does the `LinkedHashMap` maintain insertion order?                                            ','Collections'),(108,' `EnumSet` is a specialized `Set` implementation designed for use with enum types. It is more efficient than other `Set` implementations when working with enum constants. ','Expert',' What is the `EnumSet` class?                                                                      ','Collections'),(109,' `WeakHashMap` is a map implementation where keys are held weakly. If a key is no longer in use (no strong references), it can be garbage collected. ','Expert',' What is the `WeakHashMap` class used for?                                                        ','Collections'),(110,' `HashMap` does not guarantee any order and is not sorted, while `TreeMap` maintains a sorted order of keys and implements the `NavigableMap` interface. ','Expert',' What is the difference between `HashMap` and `TreeMap`?                                          ','Collections'),(111,' `IdentityHashMap` is a map implementation that uses reference equality (==) instead of object equality (`equals()`) to compare keys. ','Expert',' What is the `IdentityHashMap` class?                                                              ','Collections'),(112,' `HashMap` handles collisions using linked lists or trees (in Java 8+) within buckets. `LinkedHashMap` uses a linked list to maintain insertion order and also handles collisions in a similar manner. ','Expert',' How do `HashMap` and `LinkedHashMap` handle collisions?                                           ','Collections'),(113,' `TreeMap` is a `NavigableMap` that uses a red-black tree to store key-value pairs in a sorted order based on the natural ordering of the keys or a provided `Comparator`. ','Expert',' What is the `TreeMap` class and how does it ensure sorted order?                                  ','Collections'),(114,' `LinkedBlockingQueue` is a thread-safe queue that uses linked nodes to support blocking operations for adding and removing elements, allowing concurrent access. ','Expert',' What is the `LinkedBlockingQueue` class?                                                          ','Collections'),(115,' `ConcurrentSkipListMap` is a thread-safe, scalable map implementation that uses a skip list data structure, providing concurrent access and maintaining elements in sorted order. ','Expert',' What is the `ConcurrentSkipListMap` class?                                                        ','Collections'),(116,' `Collections` utility methods provide static methods for operating on or returning collections, such as sorting, searching, and shuffling. Examples include `Collections.sort()` and `Collections.shuffle()`. ','Expert',' What are `Collections` utility methods and how are they used?                                     ','Collections'),(117,' `ArrayDeque` is a resizable array implementation of the `Deque` interface. It is used when you need a double-ended queue with fast insertion and removal from both ends. ','Expert',' What is the `ArrayDeque` class and when would you use it?                                         ','Collections'),(118,' `Queue` is an interface that represents a collection designed for holding elements prior to processing. Common implementations include `LinkedList`, `PriorityQueue`, and `ArrayDeque`. ','Expert',' What is the `Queue` interface and what are its common implementations?                            ','Collections'),(119,' The `Collections.unmodifiableXXX` methods return an unmodifiable view of the specified collection, which prevents modification of the collection, ensuring it remains read-only. ','Expert',' What is the purpose of the `Collections.unmodifiableXXX` methods?                                  ','Collections'),(120,' A thread is a lightweight unit of execution within a process. Threads allow concurrent execution of code.              ','Expert',' What is a thread in Java?                                                                             ','Multithreading'),(121,' You can create a thread by extending the `Thread` class or implementing the `Runnable` interface and passing it to a `Thread` object. ','Expert',' How do you create a thread in Java?                                                                    ','Multithreading'),(122,' `Thread` is a class that represents a thread of execution. `Runnable` is an interface that should be implemented to define the code executed by the thread. `Runnable` is used with `Thread` for better design. ','Beginner',' What is the difference between `Thread` and `Runnable` in Java?                                      ','Multithreading'),(123,' The `run()` method contains the code that constitutes the new thread\'s task. It is called when the thread is started. ','Beginner',' What is the `run()` method in Java threads?                                                           ','Multithreading'),(124,' The `start()` method initiates the execution of a thread by calling its `run()` method in a new thread of execution. ','Beginner',' What is the `start()` method used for in Java threads?                                                ','Multithreading'),(125,' Thread synchronization is a mechanism that ensures that multiple threads do not access shared resources simultaneously, avoiding conflicts and data inconsistency. ','Intermediate',' What is thread synchronization in Java?                                                                ','Multithreading'),(126,' The `synchronized` keyword is used to prevent multiple threads from accessing a block of code or method simultaneously. It ensures that only one thread can execute the synchronized code at a time. ','Intermediate',' What is the `synchronized` keyword used for?                                                           ','Multithreading'),(127,' A deadlock occurs when two or more threads are blocked forever, each waiting for the other to release resources. ','Intermediate',' What is a `deadlock` in multithreading?                                                                ','Multithreading'),(128,' To avoid deadlocks, use strategies like acquiring locks in a consistent order, using timeout mechanisms, and avoiding nested locks. ','Intermediate',' How can you avoid deadlocks in Java?                                                                    ','Multithreading'),(129,' The `volatile` keyword ensures that a variable\'s value is always read from and written to main memory, ensuring visibility of changes across threads. ','Intermediate',' What is the `volatile` keyword in Java?                                                                ','Multithreading'),(130,' The `wait()` method causes the current thread to release the lock and wait until another thread invokes `notify()` or `notifyAll()` on the same object. ','Intermediate',' What is the `wait()` method in Java?                                                                   ','Multithreading'),(131,' The `notify()` method wakes up a single thread that is waiting on the object\'s monitor. The thread must reacquire the lock before proceeding. ','Intermediate',' What is the `notify()` method in Java?                                                                 ','Multithreading'),(132,' The `notifyAll()` method wakes up all threads waiting on the object\'s monitor, allowing them to compete for the lock. ','Intermediate',' What is the `notifyAll()` method in Java?                                                               ','Multithreading'),(133,' `ThreadPoolExecutor` is a class that provides a pool of threads to execute tasks. It helps in managing and reusing threads efficiently. ','Intermediate',' What is a `ThreadPoolExecutor`?                                                                        ','Multithreading'),(134,' The `ExecutorService` interface provides a higher-level replacement for managing threads. It allows you to submit tasks for execution and manage a pool of threads. ','Intermediate',' What is the purpose of the `ExecutorService` interface?                                                ','Multithreading'),(135,' `CountDownLatch` is used to make one or more threads wait until a set of operations in other threads completes. `CyclicBarrier` allows a set of threads to all wait for each other to reach a common barrier point. ','Intermediate',' What are `CountDownLatch` and `CyclicBarrier`?                                                        ','Multithreading'),(136,' `ForkJoinPool` is a specialized implementation of `ExecutorService` designed to efficiently process tasks that can be recursively divided into smaller tasks. ','Intermediate',' What is the `ForkJoinPool` class used for?                                                             ','Multithreading'),(137,' `Semaphore` is a synchronization aid that controls access to a shared resource through a set of permits. Threads acquire permits to access resources and release permits when done. ','Expert',' What is the `Semaphore` class and how does it work?                                                    ','Multithreading'),(138,' `ReentrantLock` is a class that provides explicit locking with additional features like timed and interruptible lock attempts. It offers more flexibility compared to `synchronized` blocks. ','Expert',' What is the `ReentrantLock` class and how is it different from `synchronized` blocks?                  ','Multithreading'),(139,' `ReadWriteLock` is an interface that allows multiple threads to read shared data concurrently while ensuring exclusive access for writing. It should be used when read operations are more frequent than write operations. ','Expert',' What is the `ReadWriteLock` interface and when should it be used?                                     ','Multithreading'),(140,' `Atomic` classes, such as `AtomicInteger` and `AtomicLong`, provide atomic operations on single variables, ensuring thread-safe operations without the need for explicit synchronization. ','Expert',' How does the `Atomic` class work in Java?                                                               ','Multithreading'),(141,' `ThreadLocal` provides thread-local variables that are not shared among threads. Each thread accessing such a variable has its own, independently initialized copy. ','Expert',' What is a `ThreadLocal` variable in Java?                                                               ','Multithreading'),(142,' `Phaser` is a synchronization aid that allows multiple parties to wait for each other to reach a common barrier. It is more flexible than `CountDownLatch` and `CyclicBarrier`. ','Expert',' What is the `Phaser` class used for in Java?                                                            ','Multithreading'),(143,' `notify()` wakes up a single thread waiting on the object\'s monitor, whereas `notifyAll()` wakes up all threads waiting on the object\'s monitor. ','Expert',' What is the difference between `notify()` and `notifyAll()` methods in Java?                           ','Multithreading'),(144,' `Runnable` represents a task that can be executed concurrently but does not return a result. `Callable` represents a task that can be executed concurrently and returns a result or throws an exception. ','Expert',' What are `Runnable` and `Callable` interfaces?                                                        ','Multithreading'),(145,' The `join()` method waits for a thread to complete its execution before proceeding with the next task. It is used to ensure that one thread completes before another thread continues. ','Expert',' What is the `join()` method in Java threads?                                                            ','Multithreading'),(146,' `ConcurrentLinkedQueue` is a thread-safe, non-blocking queue that uses a linked-node structure. It provides efficient thread-safe operations for concurrent access. ','Expert',' How does `ConcurrentLinkedQueue` work in Java?                                                        ','Multithreading'),(147,' `ThreadGroup` is a class that represents a group of threads. It is used for managing and controlling multiple threads as a single unit, such as setting a common thread priority or interrupting all threads in the group. ','Expert',' What is the `ThreadGroup` class and why is it used?                                                   ','Multithreading'),(148,' A `synchronized` method locks the entire method, ensuring that only one thread executes it at a time. A `synchronized` block allows locking on a specific block of code, providing finer control over synchronization. ','Expert',' What is the difference between `synchronized` method and `synchronized` block?                        ','Multithreading'),(149,' The `Lock` interface provides explicit locking and unlocking operations. It offers more advanced features compared to `synchronized` blocks, such as timed locks and interruptible locks. ','Expert',' What is the `Lock` interface and what are its advantages over `synchronized` blocks?                  ','Multithreading'),(150,' The `submit()` method submits a task for execution and returns a `Future` representing the result. The `execute()` method submits a task for execution but does not return a result. ','Expert',' What is the `ThreadPoolExecutor` class\'s `submit()` method and how is it different from `execute()`?   ','Multithreading'),(151,' `CompletableFuture` is a class that represents a future result of an asynchronous computation. It provides methods for handling asynchronous tasks and chaining operations. ','Expert',' What is the purpose of the `CompletableFuture` class in Java?                                          ','Multithreading'),(152,' The `Executor` framework handles tasks by providing a pool of threads to execute tasks asynchronously. It abstracts the details of thread management and allows you to submit tasks for execution. ','Expert',' How does the `Executor` framework handle tasks?                                                       ','Multithreading'),(153,' `AtomicReference` is a class that provides atomic operations on an object reference, ensuring thread-safe updates without requiring explicit synchronization. ','Expert',' What is the `AtomicReference` class used for?                                                         ','Multithreading'),(154,' `Thread.sleep()` pauses the current thread\'s execution for a specified amount of time. It is used to delay thread execution but does not release locks or other resources. ','Expert',' What is the purpose of `Thread.sleep()` and how does it work?                                          ','Multithreading'),(155,' `CountDownLatch` is a synchronization aid that allows one or more threads to wait until a set of operations in other threads completes. It uses a countdown mechanism to signal completion. ','Expert',' What is the `CountDownLatch` class and how does it work?                                               ','Multithreading'),(156,' `LockSupport` provides static methods for thread blocking and unblocking, such as `park()` and `unpark()`. It is used for low-level thread synchronization and is the basis for higher-level synchronization constructs. ','Expert',' What is the `LockSupport` class used for in Java?                                                      ','Multithreading'),(157,' An exception is an event that disrupts the normal flow of a program\'s execution. It typically indicates an error or an unexpected condition. ','Beginner',' What is an exception in Java?                                                                      ','Exception Handling'),(158,' Exception handling provides a way to manage runtime errors, allowing a program to continue execution or terminate gracefully rather than crashing. ','Beginner',' What is the purpose of exception handling in Java?                                                 ','Exception Handling'),(159,' The `try` block is used to enclose code that might throw an exception. It is followed by one or more `catch` blocks to handle exceptions. ','Beginner',' What is the `try` block used for?                                                                   ','Exception Handling'),(160,' A `catch` block is used to handle exceptions thrown by the `try` block. It catches the exception and executes code to handle it. ','Beginner',' What is a `catch` block?                                                                           ','Exception Handling'),(161,' A `finally` block is used to execute code that must run regardless of whether an exception is thrown or not, such as closing resources. ','Beginner',' What is a `finally` block?                                                                         ','Exception Handling'),(162,' The `throw` keyword is used to explicitly throw an exception from a method or block of code. ','Beginner',' What is the `throw` keyword used for?                                                               ','Exception Handling'),(163,' The `throws` keyword is used in a method signature to indicate that a method may throw one or more exceptions, and that the caller of the method must handle them. ','Beginner',' What is the `throws` keyword used for?                                                              ','Exception Handling'),(164,' Checked exceptions are exceptions that must be either caught or declared in the method signature using `throws`. Unchecked exceptions (runtime exceptions) do not need to be declared or caught. ','Intermediate',' What is the difference between checked and unchecked exceptions?                                  ','Exception Handling'),(165,' `IOException` is a checked exception that occurs during input or output operations, such as file handling or network communication. ','Intermediate',' What is an `IOException`?                                                                         ','Exception Handling'),(166,' `NullPointerException` is an unchecked exception that occurs when the JVM attempts to use an object reference that has not been initialized (i.e., is `null`). ','Intermediate',' What is a `NullPointerException`?                                                                  ','Exception Handling'),(167,' `Exception` is the base class for all checked exceptions in Java. It provides a common interface for exception handling. ','Intermediate',' What is the `Exception` class in Java?                                                              ','Exception Handling'),(168,' Exception chaining allows an exception to be thrown from another exception. This is achieved by passing the original exception to the new exception\'s constructor. ','Intermediate',' How does exception chaining work in Java?                                                           ','Exception Handling'),(169,' `printStackTrace()` prints the stack trace of the exception to the console, while `getMessage()` returns a string containing the description of the exception. ','Intermediate',' What is the difference between `printStackTrace()` and `getMessage()`?                              ','Exception Handling'),(170,' To create a custom exception, extend the `Exception` class or one of its subclasses and provide a constructor that takes a message or a cause. ','Intermediate',' How do you create a custom exception in Java?                                                        ','Exception Handling'),(171,' `Throwable` is the superclass of all errors and exceptions in Java. It provides methods to get the message, stack trace, and cause of an exception. ','Intermediate',' What is the purpose of the `Throwable` class?                                                       ','Exception Handling'),(172,' `Error` represents serious issues that a typical application should not try to handle, such as `OutOfMemoryError`. `Exception` represents conditions that an application might want to catch and handle. ','Intermediate',' What is the difference between `Error` and `Exception` in Java?                                     ','Exception Handling'),(173,' Best practices include handling exceptions at appropriate levels, avoiding empty catch blocks, using specific exception types, and logging exceptions for troubleshooting. ','Intermediate',' What are the best practices for exception handling in Java?                                         ','Exception Handling'),(174,' `StackOverflowError` is an error that occurs when the stack space allocated to a thread is exhausted, often due to excessive or infinite recursion. ','Intermediate',' What is the `StackOverflowError` and when does it occur?                                             ','Exception Handling'),(175,' `ArithmeticException` is an unchecked exception that occurs during arithmetic operations, such as division by zero. ','Intermediate',' What is the `ArithmeticException` and when is it thrown?                                            ','Exception Handling'),(176,' `ClassNotFoundException` is a checked exception that occurs when an application tries to load a class by its name, but the class cannot be found. ','Intermediate',' What is the `ClassNotFoundException` and when is it thrown?                                        ','Exception Handling'),(177,' The `try-with-resources` statement automatically closes resources such as files or sockets when the `try` block exits. Resources must implement the `AutoCloseable` interface. ','Expert',' What is the `try-with-resources` statement and how does it work?                                    ','Exception Handling'),(178,' `SuppressedException` is an exception that is added to the list of suppressed exceptions when a `try-with-resources` statement closes resources, and another exception is thrown. ','Expert',' What is the `SuppressedException` and how is it used?                                               ','Exception Handling'),(179,' `throw` is used to explicitly throw an exception, while `throws` is used in method signatures to declare that a method can throw exceptions. ','Expert',' What is the difference between `throw` and `throws` keywords?                                       ','Exception Handling'),(180,' `IllegalStateException` is an unchecked exception that indicates that a method has been invoked at an illegal or inappropriate time. ','Expert',' What is the `IllegalStateException` and when is it thrown?                                          ','Exception Handling'),(181,' `NoSuchMethodException` is a checked exception that occurs when an application attempts to access a method that does not exist. ','Expert',' What is the `NoSuchMethodException` and when is it thrown?                                          ','Exception Handling'),(182,' `Throwable.getCause()` returns the cause of the exception or `null` if the cause is nonexistent or unknown. It helps in exception chaining and debugging. ','Expert',' What is the purpose of `Throwable.getCause()`?                                                      ','Exception Handling'),(183,' You can handle multiple exceptions in a single `catch` block by using a multi-catch block with the `','Expert',' How do you handle multiple exceptions in a single `catch` block?                                    ','Exception Handling'),(184,' The `finally` block is used to execute code that must run regardless of whether an exception was thrown or not, such as releasing resources. It is executed after the `try` and `catch` blocks. ','Expert',' What is the `finally` block and when is it executed?                                                ','Exception Handling'),(185,' `IllegalArgumentException` is an unchecked exception thrown to indicate that a method has been passed an illegal or inappropriate argument. ','Expert',' What is the `IllegalArgumentException` and when is it thrown?                                       ','Exception Handling'),(186,' `NumberFormatException` is an unchecked exception that occurs when an attempt is made to convert a string to a numeric type, but the string does not have an appropriate format. ','Expert',' What is the `NumberFormatException` and when is it thrown?                                          ','Exception Handling'),(187,' `ExceptionInInitializerError` is an error thrown when an exception occurs during the static initialization of a class or its static variables. ','Expert',' What is `ExceptionInInitializerError` and when is it thrown?                                        ','Exception Handling'),(188,' `RuntimeException` is a subclass of `Exception` that represents unchecked exceptions. `Exception` is the base class for all checked exceptions and some unchecked exceptions. ','Expert',' What is the difference between `RuntimeException` and `Exception`?                                  ','Exception Handling'),(189,' `ArithmeticException` is thrown for arithmetic errors like division by zero, while `IllegalArgumentException` is thrown when a method receives an illegal argument. ','Expert',' What is the `ArithmeticException` and how is it different from `IllegalArgumentException`?           ','Exception Handling'),(190,' `UnsupportedOperationException` is an unchecked exception thrown to indicate that a requested operation is not supported or allowed. ','Expert',' What is the `UnsupportedOperationException` and when is it thrown?                                 ','Exception Handling'),(191,' `SQLException` is a checked exception thrown when there is an issue with accessing or interacting with a database. ','Expert',' What is the `SQLException` and when is it thrown?                                                  ','Exception Handling'),(192,' `ExecutionException` is a checked exception thrown when attempting to retrieve the result of a task that threw an exception. It is often used with concurrent tasks and `Future`. ','Expert',' What is the `ExecutionException` and when is it thrown?                                             ','Exception Handling'),(193,' The `throw` keyword is used to explicitly throw an exception, while `throws` is used to declare that a method might throw one or more exceptions. ','Expert',' What are `throw` and `throws` keywords used for in exception handling?                             ','Exception Handling'),(194,' A `CustomCheckedException` is a user-defined exception that extends `Exception` (not `RuntimeException`). To create it, you define a new class extending `Exception` and provide constructors. ','Expert',' What is a `CustomCheckedException` and how do you create it?                                        ','Exception Handling'),(195,' A `CustomUncheckedException` extends `RuntimeException`. To create it, define a new class extending `RuntimeException` and provide constructors. ','Expert',' What is a `CustomUncheckedException` and how do you create it?                                      ','Exception Handling'),(196,' Spring Boot is an extension of the Spring framework that simplifies the setup and development of new Spring applications through convention over configuration and built-in defaults. ','Beginner',' What is Spring Boot?                                                                            ','SpringBoot'),(197,' Main features include auto-configuration, standalone applications, embedded servers, and production-ready metrics.           ','Beginner',' What are the main features of Spring Boot?                                                       ','SpringBoot'),(198,' A Spring Boot application can be created using Spring Initializr, or by using the `spring-boot-starter` dependency in a Maven or Gradle project. ','Beginner',' How do you create a Spring Boot application?                                                     ','SpringBoot'),(199,' `@SpringBootApplication` is a convenience annotation that combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`. ','Beginner',' What is the purpose of the `@SpringBootApplication` annotation?                                  ','SpringBoot'),(200,' `spring-boot-starter` dependencies are pre-defined sets of libraries and configurations that simplify adding common functionality to a Spring Boot application. Examples include `spring-boot-starter-web` and `spring-boot-starter-data-jpa`. ','Beginner',' What are `spring-boot-starter` dependencies?                                                     ','SpringBoot'),(201,' Auto-configuration is a feature of Spring Boot that automatically configures your application based on the dependencies present in the classpath. ','Intermediate',' What is auto-configuration in Spring Boot?                                                        ','SpringBoot'),(202,' You can override default auto-configuration by providing your own configuration or by using `@ConditionalOnMissingBean` or `@ConditionalOnProperty` annotations. ','Intermediate',' How can you override the default Spring Boot auto-configuration?                                  ','SpringBoot'),(203,' The `application.properties` file is used to configure various aspects of a Spring Boot application, such as database connections and server settings. ','Intermediate',' What is the purpose of the `application.properties` file?                                         ','SpringBoot'),(204,' Spring Boot Actuators provide built-in endpoints to monitor and manage the application, such as `/health`, `/metrics`, and `/info`. ','Intermediate',' What are Spring Boot Actuators?                                                                   ','SpringBoot'),(205,' `@Component` is a Spring annotation used to declare a class as a Spring-managed bean, which allows it to be automatically detected during classpath scanning. ','Intermediate',' What is the `@Component` annotation used for?                                                     ','SpringBoot'),(206,' You configure the database connection in the `application.properties` or `application.yml` file by specifying properties such as `spring.datasource.url`, `spring.datasource.username`, and `spring.datasource.password`. ','Intermediate',' How do you configure a Spring Boot application to connect to a database?                           ','SpringBoot'),(207,' `@RestController` is a specialized version of `@Controller` that combines `@Controller` and `@ResponseBody`, meaning it returns JSON/XML responses directly. `@Controller` is used for rendering views (e.g., JSP, Thymeleaf). ','Intermediate',' What is the difference between `@RestController` and `@Controller`?                               ','SpringBoot'),(208,' A Spring Boot Starter is a set of convenient dependency descriptors you can include in your application. They provide core functionalities and are used to simplify the configuration of Spring Boot projects. ','Intermediate',' What is a Spring Boot Starter?                                                                    ','SpringBoot'),(209,' `@Configuration` is used to define bean methods in a Spring Boot application, which are then managed by the Spring container. It indicates that a class can be used by the Spring IoC container as a source of bean definitions. ','Intermediate',' What is the use of `@Configuration` in Spring Boot?                                               ','SpringBoot'),(210,' Profiles are used to define different configurations for different environments. You can use `@Profile` annotation to activate specific beans for a particular profile. Profiles are defined in `application.properties` or `application.yml` using the `spring.profiles.active` property. ','Intermediate',' How do you use profiles in Spring Boot?                                                            ','SpringBoot'),(211,' You create a RESTful web service by defining a controller class annotated with `@RestController`, and then creating methods annotated with `@RequestMapping`, `@GetMapping`, `@PostMapping`, etc., to handle HTTP requests. ','Intermediate',' How do you create a RESTful web service with Spring Boot?                                           ','SpringBoot'),(212,' Spring Boot DevTools provides features like automatic restarts, live reloads, and configurations for better development experience. It helps improve productivity by automatically restarting the application on code changes. ','Expert',' What is Spring Boot DevTools and how does it help in development?                                 ','SpringBoot'),(213,' You handle exceptions globally using `@ControllerAdvice` combined with `@ExceptionHandler` methods. `@ControllerAdvice` allows you to handle exceptions across the whole application in one global handling component. ','Expert',' How do you handle exceptions globally in Spring Boot?                                             ','SpringBoot'),(214,' `@SpringBootApplication` is a meta-annotation that combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`. It replaces the need to use these annotations individually. ','Expert',' What is the `@SpringBootApplication` annotation and what does it replace?                         ','SpringBoot'),(215,' You implement custom health checks by creating a class that implements the `HealthIndicator` interface and registering it as a bean in your application context. ','Expert',' How do you implement custom health checks using Spring Boot Actuator?                               ','SpringBoot'),(216,' Common ways to deploy a Spring Boot application include packaging it as a JAR or WAR file and deploying it to a standalone server, cloud platforms like AWS or Heroku, or containerizing it with Docker. ','Expert',' What are some common ways to deploy a Spring Boot application?                                    ','SpringBoot'),(217,' `@Conditional` is used to conditionally create a bean based on certain conditions. It allows you to define conditional logic for bean registration based on environment properties or other criteria. ','Expert',' What is the `@Conditional` annotation used for?                                                     ','SpringBoot'),(218,' Spring Boot supports testing with built-in support for integration tests using `@SpringBootTest`, mock testing with `@MockBean`, and using various testing frameworks such as JUnit and Mockito. ','Expert',' How does Spring Boot support testing?                                                               ','SpringBoot'),(219,' You customize Spring Boot logging by configuring the logging levels in `application.properties` or `application.yml`, using `logging.level` properties to set levels for specific packages or classes. ','Expert',' How do you customize Spring Boot logging?                                                           ','SpringBoot'),(220,' `@EnableAutoConfiguration` is a Spring Boot annotation that automatically configures the application based on the dependencies present in the classpath. It eliminates the need for manual configuration. ','Expert',' What is the purpose of `@EnableAutoConfiguration`?                                                 ','SpringBoot'),(221,' Spring Boot’s embedded servers (e.g., Tomcat, Jetty, Undertow) allow you to run applications standalone without needing a separate server installation. They are included as dependencies and managed by Spring Boot. ','Expert',' What are Spring Boot’s embedded servers and how do they work?                                       ','SpringBoot'),(222,' You secure a Spring Boot application using Spring Security, which provides authentication, authorization, and various security features. You can configure security settings in `application.properties` or `WebSecurityConfigurerAdapter`. ','Expert',' How do you secure a Spring Boot application?                                                        ','SpringBoot'),(223,' The `@Bean` annotation is used to define a bean method in a configuration class. It tells Spring that the method will return an object that should be registered as a bean in the Spring context. ','Expert',' What is the `@Bean` annotation and how is it used in Spring Boot?                                  ','SpringBoot'),(224,' You configure Spring Boot to use a different database by updating the `spring.datasource.url`, `spring.datasource.username`, and `spring.datasource.password` properties in the `application.properties` or `application.yml` file. You may also need to include appropriate database driver dependencies. ','Expert',' How do you configure Spring Boot to use a different database?                                       ','SpringBoot'),(225,' You integrate with messaging systems by adding the appropriate starter dependencies (e.g., `spring-boot-starter-amqp` for RabbitMQ or `spring-boot-starter-kafka` for Kafka), and configuring the messaging system properties in `application.properties` or `application.yml`. ','Expert',' How do you integrate Spring Boot with messaging systems like RabbitMQ or Kafka?                     ','SpringBoot'),(226,' `@ConfigurationProperties` is used to bind external configuration properties (e.g., from `application.properties` or `application.yml`) to a Java bean. It helps in grouping related properties and validating them. ','Expert',' What is Spring Boot’s `@ConfigurationProperties` and how is it used?                               ','SpringBoot'),(227,' You handle asynchronous processing using `@Async` annotation on methods that should run asynchronously. You need to enable asynchronous processing with `@EnablBeginnernc` and configure a thread pool if needed. ','Expert',' How do you handle asynchronous processing in Spring Boot?                                           ','SpringBoot'),(228,' `@Import` is used to import additional configuration classes into a Spring configuration. It allows for modular configuration and reusability of configuration classes. ','Expert',' What is the role of `@Import` in Spring Boot?                                                       ','SpringBoot'),(229,' `@DataJpaTest` is used for testing JPA repositories. It provides an in-memory database, transaction management, and scanning of JPA repositories while excluding other beans like controllers and services. ','Expert',' What is Spring Boot’s `@DataJpaTest` used for?                                                     ','SpringBoot'),(230,' You configure different environments using profiles. Define environment-specific properties in `application-{profile}.properties` or `application-{profile}.yml`, and activate profiles using the `spring.profiles.active` property. ','Expert',' How do you configure a Spring Boot application for different environments (e.g., dev, prod)?         ','SpringBoot'),(231,' `@SpringBootTest` is used to load the full application context for integration tests. It provides a comprehensive testing environment that includes the Spring Boot application context and all its beans. ','Expert',' What is Spring Boot’s `@SpringBootTest` annotation used for?','SpringBoot'),(232,' Application configurations are managed through `application.properties` or `application.yml` files. You can also use `@Value` and `@ConfigurationProperties` to inject and bind properties into beans. ','Expert',' How do you manage application configurations in Spring Boot?                                        ','SpringBoot'),(233,' `@RequestMapping` is used to map web requests to specific handler methods in controllers. It can be used with HTTP methods (GET, POST, etc.) and provides flexible mapping of URL patterns and request parameters. ','Expert',' What is the `@RequestMapping` annotation and how is it used in Spring Boot?                         ','SpringBoot'),(234,' You implement custom exception handling using `@ControllerAdvice` and `@ExceptionHandler` annotations. Define a global exception handling class that catches and processes exceptions thrown by controllers. ','Expert',' How do you implement custom exception handling in a Spring Boot application?                        ','SpringBoot'),(235,' `@Transactional` is used to manage transactions in a Spring Boot application. It ensures that a method or class executes within a transaction, providing consistency and rollback capabilities. ','Expert',' What is the `@Transactional` annotation and how is it used?                                       ','SpringBoot'),(236,' Database migrations can be handled using tools like Flyway or Liquibase. Include the appropriate starter dependencies, configure migration scripts, and Spring Boot will automatically apply migrations on application startup. ','Expert',' How do you handle database migrations in Spring Boot?                                               ','SpringBoot'),(237,' Spring Boot supports internationalization by configuring message sources with `ResourceBundleMessageSource` and using `@MessageSource` in your application. You can provide different messages for different locales. ','Expert',' How does Spring Boot support internationalization (i18n)?                                           ','SpringBoot'),(238,' `@ComponentScan` is used to specify the packages to scan for Spring components. It allows you to control the component scanning behavior and customize which packages are included. ','Expert',' What is the use of `@ComponentScan` in Spring Boot?                                                ','SpringBoot'),(239,' Hibernate is an Object-Relational Mapping (ORM) framework for Java that simplifies database interactions by mapping Java objects to database tables. ','Beginner',' What is Hibernate?                                                                             ','Hibernate/ Spring Data JPA'),(240,' Spring Data JPA is a part of the Spring Data project that provides a repository abstraction layer for JPA. It simplifies data access by reducing boilerplate code and providing powerful query methods. ','Beginner',' What is Spring Data JPA?                                                                        ','Hibernate/ Spring Data JPA'),(241,' Benefits include automatic schema generation, lazy loading, caching, transaction management, and reduced boilerplate code for database interactions. ','Beginner',' What are the benefits of using Hibernate?                                                        ','Hibernate/ Spring Data JPA'),(242,' An Entity in Hibernate represents a table in the database. It is a Java class annotated with `@Entity` that Hibernate maps to a database table. ','Beginner',' What is an Entity in Hibernate?                                                                  ','Hibernate/ Spring Data JPA'),(243,' You define a primary key using the `@Id` annotation on a field in the entity class. The `@GeneratedValue` annotation can be used to specify how the primary key is generated. ','Beginner',' How do you define a primary key in Hibernate?                                                    ','Hibernate/ Spring Data JPA'),(244,' The `@Table` annotation specifies the name of the table in the database that the entity maps to. It can also be used to define additional table attributes like schema and catalog. ','Beginner',' What is the `@Table` annotation used for in Hibernate?                                          ','Hibernate/ Spring Data JPA'),(245,' The `@Column` annotation is used to specify the details of the column in the database table that a field in the entity maps to. It allows setting column name, length, and other properties. ','Beginner',' What is the purpose of the `@Column` annotation in Hibernate?                                  ','Hibernate/ Spring Data JPA'),(246,' Lazy loading is a technique where the actual data of an association is loaded only when it is accessed for the first time. It helps in optimizing performance by deferring the loading of associated entities until needed. ','Beginner',' What is lazy loading in Hibernate?                                                               ','Hibernate/ Spring Data JPA'),(247,' Eager loading is a strategy where associated entities are fetched immediately when the parent entity is loaded. It helps in avoiding lazy loading issues but can impact performance if not used judiciously. ','Beginner',' What is eager loading in Hibernate?                                                              ','Hibernate/ Spring Data JPA'),(248,' The `@Entity` annotation marks a Java class as an entity that should be mapped to a database table. It is a key annotation for defining persistent classes in Hibernate. ','Beginner',' What is the purpose of the `@Entity` annotation in Hibernate?                                   ','Hibernate/ Spring Data JPA'),(249,' `@OneToOne` defines a one-to-one relationship where one entity is associated with exactly one other entity. `@ManyToOne` defines a many-to-one relationship where multiple entities are associated with one entity. ','Intermediate',' What is the difference between `@OneToOne` and `@ManyToOne` relationships in Hibernate?          ','Hibernate/ Spring Data JPA'),(250,' The `@JoinColumn` annotation specifies the column in the database table that is used to join two tables in a relationship. It is typically used in association mappings like `@OneToOne`, `@ManyToOne`, and `@ManyToMany`. ','Intermediate',' How do you use the `@JoinColumn` annotation in Hibernate?                                         ','Hibernate/ Spring Data JPA'),(251,' A Hibernate `Session` is an interface that provides methods for interacting with the database. It is used to perform CRUD operations, manage transactions, and query data. ','Intermediate',' What is a Hibernate `Session`?                                                                   ','Hibernate/ Spring Data JPA'),(252,' Both methods are used to insert new entities into the database. The `save()` method returns the generated identifier, while `persist()` does not. Additionally, `persist()` is part of JPA and is intended to be used with JPA-compliant implementations. ','Intermediate',' What is the difference between `save()` and `persist()` methods in Hibernate?                    ','Hibernate/ Spring Data JPA'),(253,' The `@Transactional` annotation is used to define the boundaries of a transaction. It ensures that all operations within the annotated method or class are executed within a single transaction context. ','Intermediate',' What is the `@Transactional` annotation used for in Spring Data JPA?                            ','Hibernate/ Spring Data JPA'),(254,' `@Query` allows you to define a custom JPQL query directly on a repository method, while `@NamedQuery` is used to define named queries at the entity level, which can be referenced by name in repository methods. ','Intermediate',' What is the difference between `@Query` and `@NamedQuery` in Spring Data JPA?                    ','Hibernate/ Spring Data JPA'),(255,' The `EntityManager` is the primary JPA interface for interacting with the persistence context. It provides methods for CRUD operations, querying, and transaction management. ','Intermediate',' What is the `EntityManager` in JPA and how is it used?                                          ','Hibernate/ Spring Data JPA'),(256,' Pagination can be performed using the `PagingAndSortingRepository` interface, which provides methods like `findAll(Pageable pageable)` to retrieve a specific page of results. You can also use `@Query` with `Pageable` parameter for custom queries. ','Intermediate',' How do you perform pagination with Spring Data JPA?                                               ','Hibernate/ Spring Data JPA'),(257,' The `@Fetch` annotation is used to specify the fetching strategy for associations. It can be set to `FetchType.LAZY` or `FetchType.EAGER`, and additional options like `FetchMode.JOIN` or `FetchMode.SELECT` can be used to control fetching behavior. ','Intermediate',' What is the purpose of the `@Fetch` annotation in Hibernate?                                     ','Hibernate/ Spring Data JPA'),(258,' The `@IdClass` annotation is used to define a composite primary key for an entity. It specifies a separate class that contains the fields that make up the composite key. ','Intermediate',' What is the `@IdClass` annotation used for in Hibernate?                                         ','Hibernate/ Spring Data JPA'),(259,' The `@EmbeddedId` annotation is used to define a composite primary key using an embedded ID class. It is used when the composite key is represented by a separate class annotated with `@Embeddable`. ','Intermediate',' What is the `@EmbeddedId` annotation in Hibernate?                                                ','Hibernate/ Spring Data JPA'),(260,' The `@Cascade` annotation specifies the cascading behavior for entity operations such as `PERSIST`, `MERGE`, `REMOVE`, and `REFRESH`. It allows you to propagate operations from a parent entity to its associated child entities. ','Intermediate',' What is the purpose of the `@Cascade` annotation in Hibernate?                                   ','Hibernate/ Spring Data JPA'),(261,' Bidirectional relationships are managed by defining both sides of the relationship with appropriate annotations like `@OneToOne`, `@ManyToOne`, and `@ManyToMany`, and using `mappedBy` on one side to specify the owner of the relationship. ','Intermediate',' How do you handle bidirectional relationships in Hibernate?                                       ','Hibernate/ Spring Data JPA'),(262,' The `@Modifying` annotation is used with `@Query` to indicate that the query modifies the database (e.g., `UPDATE`, `DELETE`). It is necessary for executing non-SELECT queries. ','Intermediate',' What is the role of `@Modifying` annotation in Spring Data JPA?                                  ','Hibernate/ Spring Data JPA'),(263,' The Criteria API is used to build type-safe, dynamic queries using a programmatic approach. It provides a fluent API for constructing queries using `CriteriaBuilder`, `CriteriaQuery`, and `Root` classes. ','Intermediate',' How do you use the `Criteria API` in Hibernate?                                                   ','Hibernate/ Spring Data JPA'),(264,' `merge()` is used to update an entity that is not currently associated with the current Hibernate `Session`, while `update()` is used to update an entity that is already associated with the current `Session`. ','Intermediate',' What are the differences between `merge()` and `update()` methods in Hibernate?                   ','Hibernate/ Spring Data JPA'),(265,' The `@DynamicUpdate` annotation tells Hibernate to generate SQL `UPDATE` statements dynamically based on the modified fields of an entity. It helps to optimize update operations by only updating changed columns. ','Expert',' What is the role of the `@DynamicUpdate` annotation in Hibernate?                               ','Hibernate/ Spring Data JPA'),(266,' Multi-tenant schemas can be configured using strategies such as `Schema-based`, `Database-based`, or `Discriminator-based`. You can use the `@MultiTenantConnectionProvider` and `@CurrentTenantIdentifierResolver` interfaces to manage tenant-specific data. ','Expert',' How do you configure a multi-tenant schema using Hibernate?                                      ','Hibernate/ Spring Data JPA'),(267,' The `@EntityListeners` annotation allows you to specify listener classes that can intercept entity lifecycle events such as pre-persist, post-update, and pre-remove. It helps in implementing entity-specific business logic. ','Expert',' What is the purpose of the `@EntityListeners` annotation in Hibernate?                           ','Hibernate/ Spring Data JPA'),(268,' Lazy initialization exceptions occur when accessing a lazily-loaded association outside of the Hibernate `Session`. They can be handled by using `fetch joins`, configuring `OpenSessionInView` pattern, or eagerly loading associations as needed. ','Expert',' How do you handle lazy initialization exceptions in Hibernate?                                    ','Hibernate/ Spring Data JPA'),(269,' The `@Transactional` propagation attribute specifies how transactions should interact with each other. Values include `REQUIRED`, `REQUIRES_NEW`, `NESTED`, etc., and they define whether to join an existing transaction or start a new one. ','Expert',' What is the `@Transactional` propagation attribute, and how does it affect transaction behavior? ','Hibernate/ Spring Data JPA'),(270,' Performance optimization can be achieved by using techniques such as caching (second-level cache, query cache), optimizing HQL/JPQL queries, using `fetch` strategies appropriately, and leveraging batch processing for bulk operations. ','Expert',' How do you optimize performance in Hibernate queries?                                             ','Hibernate/ Spring Data JPA'),(271,' `@Query` allows defining custom JPQL or SQL queries directly on','Expert',' What is the role of `@Query` in Spring Data JPA, and how does it differ from `@NamedQuery`?       ','Hibernate/ Spring Data JPA'),(272,' A design pattern is a reusable solution to a common problem in software design. It represents best practices and proven techniques. ','Beginner',' What is a design pattern?                                                                       ','Design Pattern'),(273,' Design patterns are generally classified into three categories: Creational, Structural, and Behavioral. ','Beginner',' What are the main types of design patterns?                                                      ','Design Pattern'),(274,' The Singleton pattern ensures a class has only one instance and provides a global point of access to that instance. ','Beginner',' What is the Singleton pattern?                                                                   ','Design Pattern'),(275,' The Factory Method pattern defines an interface for creating an object but allows subclasses to alter the type of objects that will be created. ','Beginner',' What is the Factory Method pattern?                                                               ','Design Pattern'),(276,' The Observer pattern defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically. ','Beginner',' What is the Observer pattern?                                                                    ','Design Pattern'),(277,' The Decorator pattern allows adding new functionality to an object dynamically without altering its structure, by wrapping it in a new class. ','Beginner',' What is the Decorator pattern?                                                                   ','Design Pattern'),(278,' The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. The algorithm can vary independently from the clients that use it. ','Beginner',' What is the Strategy pattern?                                                                    ','Design Pattern'),(279,' The Adapter pattern allows incompatible interfaces to work together. It acts as a bridge between two incompatible interfaces. ','Beginner',' What is the Adapter pattern?                                                                     ','Design Pattern'),(280,' The Prototype pattern creates new objects by copying an existing object, known as the prototype, rather than creating a new instance from scratch. ','Beginner',' What is the Prototype pattern?                                                                   ','Design Pattern'),(281,' The Builder pattern separates the construction of a complex object from its representation so that the same construction process can create different representations. ','Beginner',' What is the Builder pattern?                                                                     ','Design Pattern'),(282,' The Factory Method pattern provides an interface for creating objects, but allows subclasses to decide which class to instantiate. The Abstract Factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes. ','Intermediate',' What is the difference between the Factory Method and Abstract Factory patterns?                 ','Design Pattern'),(283,' The Composite pattern allows you to compose objects into tree structures to represent part-whole hierarchies. It allows clients to treat individual objects and compositions of objects uniformly. ','Intermediate',' What is the Composite pattern?                                                                   ','Design Pattern'),(284,' The Flyweight pattern reduces the cost of creating and managing a large number of similar objects by sharing as much data as possible with similar objects. ','Intermediate',' What is the Flyweight pattern?                                                                   ','Design Pattern'),(285,' The Proxy pattern provides a surrogate or placeholder for another object to control access to it. It allows for additional functionality to be added to the real object. ','Intermediate',' What is the Proxy pattern?                                                                       ','Design Pattern'),(286,' The Chain of Responsibility pattern allows multiple objects to handle a request without the sender needing to know which object will handle it. Each handler in the chain either handles the request or passes it to the next handler. ','Intermediate',' What is the Chain of Responsibility pattern?                                                     ','Design Pattern'),(287,' The Mediator pattern defines an object that encapsulates how a set of objects interact. It promotes loose coupling by preventing objects from referring to each other explicitly and allowing their interactions to be controlled by the mediator. ','Intermediate',' What is the Mediator pattern?                                                                    ','Design Pattern'),(288,' The Command pattern encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations. It also provides support for undoable operations. ','Intermediate',' What is the Command pattern?                                                                     ','Design Pattern'),(289,' The State pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class. ','Intermediate',' What is the State pattern?                                                                       ','Design Pattern'),(290,' The Template Method pattern defines the skeleton of an algorithm in a base class but lets subclasses override specific steps of the algorithm without changing its structure. ','Intermediate',' What is the Template Method pattern?                                                             ','Design Pattern'),(291,' The Iterator pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. ','Intermediate',' What is the Iterator pattern?                                                                    ','Design Pattern'),(292,' The Builder pattern is used to construct a complex object step by step. It provides a way to create an object with multiple optional components, allowing for more flexible and readable code. ','Intermediate',' What is the Builder pattern used for?                                                             ','Design Pattern'),(293,' The Memento pattern allows capturing and externalizing an object\'s internal state without violating encapsulation, so that the object can be restored to that state later. ','Intermediate',' What is the Memento pattern?                                                                     ','Design Pattern'),(294,' The Prototype pattern is used to create new instances of an object by copying an existing object (the prototype) rather than creating new instances from scratch. ','Intermediate',' What is the Prototype pattern used for?                                                          ','Design Pattern'),(295,' The Bridge pattern separates an abstraction from its implementation so that the two can vary independently. It involves creating two separate hierarchies: one for the abstraction and one for the implementation. ','Expert',' What is the Bridge pattern?                                                                      ','Design Pattern'),(296,' The Builder pattern is used to construct a complex object step-by-step, whereas the Factory Method pattern focuses on creating a single object without specifying the exact class of object to be created. ','Expert',' How does the Builder pattern differ from the Factory Method pattern?                             ','Design Pattern'),(297,' The Interpreter pattern defines a grammar for a language and provides an interpreter to interpret sentences in the language. It is often used for designing interpreters for domain-specific languages. ','Expert',' What is the Interpreter pattern?                                                                 ','Design Pattern'),(298,' The Decorator pattern is used to add new functionality to an object dynamically, while the Proxy pattern controls access to an object. Decorators add behavior, whereas proxies can control access or modify requests. ','Expert',' What is the Decorator pattern and how is it different from the Proxy pattern?                    ','Design Pattern'),(299,' The Strategy pattern is used to select an algorithm at runtime, allowing the client to choose among different strategies. The State pattern is used to alter an object\'s behavior when its state changes, effectively changing the object\'s class. ','Expert',' What is the difference between the Strategy and State patterns?                                   ','Design Pattern'),(300,' The Visitor pattern lets you define new operations on elements of an object structure without changing the classes of the elements. It separates algorithms from the objects on which they operate. ','Expert',' What is the Visitor pattern?                                                                     ','Design Pattern'),(301,' The Singleton pattern ensures a class has only one instance and provides a global point of access to that instance. It is commonly used in scenarios where exactly one instance is required, such as in configuration classes or service locators. ','Expert',' What is the Singleton pattern and where is it commonly used?                                      ','Design Pattern'),(302,' The Chain of Responsibility pattern improves flexibility by allowing multiple handlers to process a request. It avoids Expert-coding the handling logic and enables dynamic assignment of request handlers. ','Expert',' How does the Chain of Responsibility pattern improve flexibility in handling requests?             ','Design Pattern'),(303,' The Proxy pattern provides a surrogate for an object to control access, while the Decorator pattern adds new functionality to an object. Proxies control access and perform additional operations, while decorators enhance functionality. ','Expert',' What is the Proxy pattern and how is it different from the Decorator pattern?                    ','Design Pattern'),(304,' Common use cases for the Observer pattern include implementing event handling systems, implementing publish-subscribe mechanisms, and updating user interfaces based on changes in underlying data. ','Expert',' What are some common use cases for the Observer pattern?                                          ','Design Pattern'),(305,' The Mediator pattern reduces dependencies by centralizing communication between objects in a mediator. This prevents objects from referencing each other directly, promoting loose coupling and making the system easier to maintain and modify. ','Expert',' What is the role of the Mediator pattern in reducing dependencies between objects?                 ','Design Pattern'),(306,' The Facade pattern provides a simplified interface to a complex subsystem, making it easier to use. It hides the complexities of the subsystem and exposes a unified interface for interacting with it. ','Expert',' How does the Facade pattern simplify interactions with complex systems?                           ','Design Pattern'),(307,' Key benefits of using the Composite pattern include the ability to treat individual objects and compositions uniformly, simplifying client code, and supporting tree-like structures. ','Expert',' What are the key benefits of using the Composite pattern?                                         ','Design Pattern'),(308,' The Template Method pattern defines a skeleton of an algorithm in a base class but allows subclasses to override specific steps. It helps in reusing common code while providing flexibility for custom implementations. ','Expert',' What is the purpose of the Template Method pattern?                                                ','Design Pattern'),(309,' The Adapter pattern works with legacy code by providing a wrapper that converts the interface of the legacy code into the interface expected by the client. This allows new code to interact with legacy code without modifying it. ','Expert',' How does the Adapter pattern work with legacy code?                                                ','Design Pattern'),(310,' The Flyweight pattern is used to manage a large number of objects efficiently by sharing common parts of the state between objects. It should be applied when you need to handle a large number of similar objects with shared data. ','Expert',' What is the Flyweight pattern used for and when should it be applied?                            ','Design Pattern'),(311,' Potential drawbacks of the Singleton pattern include global state management issues, difficulties in unit testing due to tightly coupled code, and challenges in concurrent environments if not implemented correctly. ','Expert',' What are some potential drawbacks of using the Singleton pattern?                                ','Design Pattern'),(312,' The Command pattern helps in implementing undo functionality by encapsulating requests as objects, which allows storing and executing commands in reverse order to undo actions. Each command object can store its own state for undo operations. ','Expert',' How does the Command pattern help in implementing undo functionality?                             ','Design Pattern'),(313,' A microservice is an architectural style that structures an application as a collection of loosely coupled services, each representing a specific business capability and independently deployable. ','Beginner',' What is a microservice?                                                                         ','Microservice'),(314,' Benefits include improved scalability, easier deployment, technology diversity, fault isolation, and better alignment with agile development. ','Beginner',' What are the main benefits of using microservices?                                               ','Microservice'),(315,' Monolithic architecture is a single, tightly coupled application, whereas microservices architecture divides an application into multiple loosely coupled services, each handling a specific function. ','Beginner',' What is the difference between monolithic and microservices architectures?                      ','Microservice'),(316,' An API gateway is a server that acts as an API front-end, receiving requests, routing them to the appropriate microservices, and handling responses. It can also provide additional functionalities like authentication, load balancing, and caching. ','Beginner',' What is an API gateway in the context of microservices?                                          ','Microservice'),(317,' Service discovery is the process of automatically detecting services available in a network and their locations, often facilitated by tools like Consul, Eureka, or Zookeeper. ','Beginner',' What is service discovery in microservices?                                                     ','Microservice'),(318,' A service registry maintains a database of available services, their locations, and their statuses. It helps in locating and communicating with services dynamically. ','Beginner',' What is the role of a service registry in microservices?                                        ','Microservice'),(319,' Common communication methods include RESTful APIs, gRPC, messaging queues (e.g., RabbitMQ, Kafka), and event streams. ','Beginner',' What are some common communication methods between microservices?                               ','Microservice'),(320,' A load balancer distributes incoming network traffic across multiple instances of a microservice to ensure even distribution of load, high availability, and reliability. ','Beginner',' What is the purpose of a load balancer in a microservices architecture?                         ','Microservice'),(321,' The Circuit Breaker pattern helps manage failures and prevent cascading failures by stopping the flow of requests to a failing service and allowing time for recovery. ','Beginner',' What is the Circuit Breaker pattern in microservices?                                            ','Microservice'),(322,' Synchronous communication involves direct request-response interactions (e.g., HTTP/REST), while asynchronous communication involves indirect interactions (e.g., messaging queues, event streams) where services do not wait for immediate responses. ','Beginner',' What is the difference between synchronous and asynchronous communication in microservices?     ','Microservice'),(323,' Data consistency can be managed using eventual consistency models, distributed transactions, and techniques such as Saga pattern, compensating transactions, and data replication. ','Intermediate',' How do you handle data consistency in a microservices architecture?                              ','Microservice'),(324,' The Saga pattern is a way to manage long-running transactions and ensure data consistency across microservices by breaking a transaction into a series of smaller, isolated steps with compensating actions for failure scenarios. ','Intermediate',' What is the Saga pattern and when would you use it?                                             ','Microservice'),(325,' Fault tolerance can be ensured using patterns like Circuit Breaker, retry mechanisms, fallback methods, and redundancy. Implementing proper monitoring and alerting also helps in identifying and addressing issues promptly. ','Intermediate',' How do you ensure fault tolerance in microservices?                                               ','Microservice'),(326,' Logging and monitoring are crucial for tracking the health, performance, and behavior of microservices. They help in detecting issues, debugging problems, and ensuring overall system stability. ','Intermediate',' What is the role of logging and monitoring in a microservices architecture?                     ','Microservice'),(327,' Distributed tracing systems track requests as they flow through multiple microservices, providing visibility into latency and performance bottlenecks. Tools like Zipkin, Jaeger, and OpenTracing are commonly used. ','Intermediate',' How does a distributed tracing system work in microservices?                                     ','Microservice'),(328,' API composition is the process of aggregating data from multiple microservices into a single API response. It often involves creating an API gateway or an orchestration service to handle complex queries and data aggregation. ','Intermediate',' What is API composition in microservices?                                                        ','Microservice'),(329,' Security can be managed using techniques such as OAuth2, JWT (JSON Web Tokens), API gateways for authentication and authorization, and encryption for data in transit and at rest. ','Intermediate',' How do you manage security in a microservices architecture?                                      ','Microservice'),(330,' An API Gateway manages external API requests and routes them to appropriate microservices, while a Service Mesh provides a dedicated infrastructure layer for managing service-to-service communications, security, and observability within a microservices architecture. ','Intermediate',' What is the difference between API Gateway and Service Mesh?                                     ','Microservice'),(331,' Strategies include implementing retry mechanisms, using Circuit Breakers, leveraging asynchronous messaging, and providing fallback methods to handle communication failures gracefully. ','Intermediate',' What are some strategies for handling inter-service communication failures?                     ','Microservice'),(332,' A configuration management service centralizes and manages configuration settings for all microservices, allowing for dynamic configuration changes and reducing configuration drift. Tools like Consul and Spring Cloud Config are commonly used. ','Intermediate',' What is the role of a configuration management service in microservices?                        ','Microservice'),(333,' Versioning of microservices can be handled using strategies such as URI versioning, header versioning, and semantic versioning. It ensures backward compatibility and smooth transitions between different versions of services. ','Intermediate',' How do you handle versioning of microservices?                                                    ','Microservice'),(334,' CQRS is a pattern that separates read operations (queries) from write operations (commands). It allows for optimized handling of queries and commands, improving scalability and performance. ','Intermediate',' What is the CQRS (Command Query Responsibility Segregation) pattern?                            ','Microservice'),(335,' Idempotency ensures that repeated requests have the same effect as a single request. It can be implemented using unique request identifiers, token-based approaches, and ensuring operations are safe to repeat without causing unintended effects. ','Intermediate',' How do you implement idempotency in microservices?                                               ','Microservice'),(336,' A container is a lightweight, portable unit that packages an application and its dependencies together. Containers, often managed with Docker, provide consistency across different environments and simplify deployment and scaling of microservices. ','Intermediate',' What is a container in the context of microservices, and why is it used?                        ','Microservice'),(337,' Kubernetes is a container orchestration platform that automates the deployment, scaling, and management of containerized applications. It provides features like service discovery, load balancing, and automated rollouts for microservices. ','Intermediate',' What is the role of Kubernetes in managing microservices?                                         ','Microservice'),(338,' Event Sourcing involves storing the state of a system as a sequence of events rather than the current state. It differs from traditional CRUD operations by focusing on event logs and allowing for replaying events to reconstruct the state. ','Expert',' What is Event Sourcing in microservices, and how does it differ from traditional CRUD operations? ','Microservice'),(339,' Service scaling can be implemented both vertically (scaling up resources for a single instance) and horizontally (scaling out by adding more instances). Load balancers and auto-scaling mechanisms in container orchestration platforms like Kubernetes help manage scaling efficiently. ','Expert',' How do you implement service scaling in a microservices architecture?                           ','Microservice'),(340,' Eventual consistency is a consistency model where data updates across distributed systems may not be immediately consistent but will eventually converge to a consistent state. It is commonly applied in microservices to ensure high availability and fault tolerance. ','Expert',' What is the concept of eventual consistency, and how does it apply to microservices?             ','Microservice'),(341,' Schema evolution can be managed using techniques like backward compatibility, versioned schemas, schema migration tools, and database change management practices. It ensures smooth transitions as services and their data schemas evolve. ','Expert',' How do you manage schema evolution in microservices?                                              ','Microservice'),(342,' Service orchestration involves coordinating interactions between multiple microservices to achieve complex workflows or business processes. It often involves a central orchestrator or workflow engine to manage and control service interactions. ','Expert',' What is the role of service orchestration in microservices?                                       ','Microservice'),(343,' Cross-cutting concerns, such as logging, security, and monitoring, are managed using shared services, aspect-oriented programming, middleware, and common libraries that can be applied consistently across microservices. ','Expert',' How do you handle cross-cutting concerns in microservices?                                        ','Microservice'),(344,' A Circuit Breaker pattern helps prevent a failure in one microservice from cascading to others by stopping requests to a failing service and allowing it time to recover. It helps maintain system stability and resilience. ','Expert',' What is the role of a circuit breaker in a microservices architecture?                           ','Microservice'),(345,' Distributed transactions can be managed using techniques like the Saga pattern, two-phase commit protocol, or eventual consistency models. These approaches help maintain data consistency across multiple services while managing transactions. ','Expert',' How do you perform distributed transactions in a microservices architecture?                     ','Microservice'),(346,' API versioning allows for managing changes and updates to APIs without breaking existing clients. It is typically implemented using versioned URLs, headers, or query parameters to distinguish between different versions of an API. ','Expert',' What is the purpose of API versioning in microservices, and how is it typically implemented?       ','Microservice'),(347,' A service mesh provides a dedicated infrastructure layer to manage service-to-service communication, including load balancing, traffic management, security, and observability. It helps streamline communication and improve service resilience. ','Expert',' What is the role of a service mesh in microservices architecture?                                ','Microservice'),(348,' The Strangler Fig pattern involves gradually replacing parts of a monolithic system with microservices. New features are developed as microservices, while old features are gradually deprecated, allowing for a smooth and controlled migration. ','Expert',' How does the Strangler Fig pattern help in migrating from a monolithic system to microservices?    ','Microservice'),(349,' An index is a data structure that improves the speed of data retrieval operations on a database table... ','Intermediate',' What is a database index? ',' Database Indexing '),(350,' An index allows the database to locate and retrieve specific rows much faster... ','Intermediate',' How does an index improve query performance? ',' Database Indexing '),(351,'Clustered Index: Physically orders the data rows in the table based on the index key. Each table can have only one clustered index.\nNon-Clustered Index: Does not affect the physical order of the data rows in the table. Multiple non-clustered indexes can be created on the same table.\nChoosing between clustered and non-clustered indexes depends on the specific use case, query patterns, and performance requirements of the database application. Clustered indexes are ideal for range queries and primary key columns, while non-clustered indexes are suitable for frequently searched columns that do not require physical data ordering.','Expert',' What is the difference between clustered and non-clustered indexes? ',' Database Indexing '),(352,' Indexing improves the speed of data retrieval operations... ','Intermediate',' How does indexing impact database performance? ',' Database Indexing '),(353,' Database indexing is a technique to improve the speed of data retrieval operations... ','Intermediate',' Describe the concept of database indexing. ',' Database Indexing '),(354,'ACID is an acronym that stands for Atomicity, Consistency, Isolation, and Durability. These properties are crucial for ensuring the reliability of database transactions:\n\nAtomicity: Atomicity ensures that all operations within a transaction are treated as a single unit. Either all of the operations are successfully completed, or none of them are. If any part of the transaction fails, the entire transaction is rolled back to its initial state before the transaction began.\n\nConsistency: Consistency ensures that the database remains in a consistent state before and after the transaction. This means that the integrity constraints, such as foreign key constraints, uniqueness constraints, etc., are maintained throughout the transaction. The database transitions from one consistent state to another consistent state after a successful transaction.\n\nIsolation: Isolation ensures that the concurrent execution of transactions does not interfere with each other. Each transaction is executed in isolation from other transactions, and the intermediate state of a transaction is invisible to other transactions until it is committed.\n\nDurability: Durability ensures that once a transaction is committed, the changes made by the transaction are permanent and survive system failures such as power outages or crashes. The changes are stored in non-volatile storage (usually disk) and can be recovered even if the system fails immediately after the transaction is committed.\n\nMaintaining ACID properties ensures data integrity, reliability, and consistency in database systems, making them suitable for critical applications where accuracy and reliability are paramount. | Hard | ACID Properties and Transactions','Expert',' Explain ACID properties in the context of database transactions. ',' ACID Properties and Transactions '),(355,'Resource Locking: Transactions in a database often require access to shared resources such as database tables, rows, or columns. To maintain data integrity and consistency, databases use locking mechanisms to ensure that only one transaction can modify a resource at a time (exclusive lock) or multiple transactions can read a resource simultaneously (shared lock).\n\nDeadlock Scenario: A deadlock situation arises when two transactions each hold a lock on a resource that the other transaction wants. As a result, neither transaction can proceed because they are waiting indefinitely for the other transaction to release the locked resource.\n\nExample:\n\nTransaction A: Holds a lock on Resource X and needs Resource Y.\nTransaction B: Holds a lock on Resource Y and needs Resource X.\nHere, Transaction A cannot proceed because it is waiting for Transaction B to release Resource Y. Similarly, Transaction B cannot proceed because it is waiting for Transaction A to release Resource X. This circular dependency leads to a deadlock.\n\nDetection and Resolution:\n\nDeadlock Detection: Databases typically have mechanisms to detect deadlocks automatically. When a deadlock is detected, the database management system (DBMS) can choose one of several strategies to resolve it.\nDeadlock Resolution: Common strategies include aborting one of the transactions (often the one that has made the least amount of progress), rolling back the transaction, or temporarily suspending one transaction until the other completes.\nPreventing Deadlocks:\n\nLocking Order: Establishing a locking hierarchy or ordering resources can prevent deadlocks. For example, always acquire locks in a predefined order (e.g., always lock Resource X before Resource Y).\nTimeouts: Implementing timeouts where transactions automatically abort if they cannot obtain all necessary locks within a specified timeframe.\nDeadlock Detection Algorithms: Some DBMSs use sophisticated algorithms to detect and prevent deadlocks proactively.\nImpact: Deadlocks can significantly impact database performance and application responsiveness. They can lead to transaction timeouts, increased resource utilization, and potential application failures if not managed properly.','Expert',' What is a deadlock in the context of databases? ',' ACID Properties and Transactions '),(356,' A transaction log records all modifications made to the database... ','Intermediate',' Describe the purpose of a transaction log. ',' ACID Properties and Transactions '),(357,'ACID transactions are crucial for ensuring data integrity, reliability, and consistency in database systems, especially in mission-critical applications such as financial systems, e-commerce platforms, and enterprise resource planning (ERP) systems. They provide the necessary guarantees that transactions will be processed correctly and reliably under various conditions, including hardware failures, software errors, and concurrent access by multiple users.\n\nImplementing and managing ACID transactions effectively requires careful design of database schemas, transaction management, and concurrency control mechanisms within the database management system (DBMS). These properties form the foundation for robust and dependable database applications that meet the stringent requirements of modern data-intensive environments.\n\n\n','Expert',' Describe the concept of ACID transactions. ',' ACID Properties and Transactions '),(358,' A transaction is a logical unit of work that contains one or more SQL statements... ','Intermediate',' Explain the concept of a transaction in a database. ',' ACID Properties and Transactions '),(359,' Normalization is the process of organizing data in a database... ','Intermediate',' What is normalization and why is it important? ',' Normalization and Data Organization '),(360,' Normalization organizes data into tables and columns to eliminate redundancy... ','Beginner',' How does database normalization help in reducing redundant data? ',' Normalization and Data Organization '),(361,'Database normalization is a systematic process used to organize data in a database to reduce redundancy and dependency, thereby improving data integrity and efficiency of data manipulation. The main goal of normalization is to structure data such that each table stores related information and avoids storing redundant data, which can lead to anomalies during data manipulation operations.\n\n### Different Forms of Database Normalization:\n\nDatabase normalization is typically divided into different forms or normal forms, each addressing specific types of anomalies that can occur in unnormalized or poorly normalized databases. Here are the common forms of database normalization:\n\n1. **First Normal Form (1NF)**:\n   - Eliminates duplicate columns from the same table.\n   - Creates a table for each set of related data, ensuring that each column contains atomic (indivisible) values.\n   - Example: If a table has a column that stores multiple values (e.g., \"Name\" column storing \"First Name\" and \"Last Name\" together), 1NF would require splitting these into separate columns.\n\n2. **Second Normal Form (2NF)**:\n   - Ensures that the table is in 1NF and all non-key attributes are fully functional dependent on the primary key.\n   - It eliminates partial dependencies where part of a composite key determines a non-key attribute.\n   - Example: In a table where student grades are stored with both student ID and course ID as composite key, if a course description is added, it even had even if even such As even contain data integrating even contain So have even access? even','Expert',' Describe the concept of database normalization and its different forms. ',' Normalization and Data Organization '),(362,'Database denormalization is a technique used to improve the performance of a database system by deliberately introducing redundancy into the database schema. This departure from fully normalized forms allows for faster query execution and reduced complexity in certain scenarios. Here’s how denormalization improves performance:\n\n### Key Aspects of Database Denormalization:\n\n1. **Reduced Joins**:\n   - In normalized databases, data is often split into multiple tables to minimize redundancy and ensure data integrity. This normalization leads to frequent joins across tables to fetch related data.\n   - Denormalization involves consolidating related data into fewer tables or duplicating data across tables, thereby reducing the need for complex joins.\n   - Fewer joins generally result in faster query execution because the database engine does not have to perform as many operations to retrieve data.\n\n2. **Improved Read Performance**:\n   - Denormalization improves read performance by reducing the number of disk accesses required to fetch data. When data is stored redundantly or aggregated in a denormalized structure, queries that involve retrieving large amounts of data can be executed more efficiently.\n   - For example, aggregating data into a summary table through denormalization allows reports and analytical queries to fetch precomputed results quickly without recalculating values across multiple normalized tables.\n\n3. **Simplified Queries**:\n   - Denormalization often leads to simpler and more straightforward query designs. By eliminating or reducing joins, query complexity is reduced, making it easier for developers to write and maintain queries.\n   - Simpler queries are generally more efficient in terms of execution time and resource usage because they require fewer computational steps to process and retrieve data.\n\n4. **Enhanced Write Performance**:\n   - While denormalization primarily benefits read operations, it can also improve write performance in certain scenarios. By reducing the number of tables that need to be updated or inserted into, denormalization can decrease the overhead associated with maintaining referential integrity and executing triggers or constraints.\n   - However, it\'s essential to note that denormalization can increase the complexity of write operations if it involves updating redundant data across multiple tables or ensuring data consistency manually.\n\n### Considerations and Trade-offs:\n\n- **Data Redundancy**: Denormalization introduces redundancy, which can lead to potential data inconsistency if not managed properly. Maintaining data integrity becomes the responsibility of application logic or additional constraints.\n  \n- **Update Anomalies**: Redundant data increases the risk of update anomalies, where changes to one copy of data may not be propagated correctly to all copies. Careful planning and synchronization mechanisms are required to mitigate these risks.\n\n- **Application Requirements**: The decision to denormalize should be based on specific performance requirements and query patterns of the application. It\'s crucial to analyze and understand the trade-offs between normalized and denormalized designs to determine the most suitable approach for improving overall database performance.\n\nIn summary, database denormalization enhances performance by reducing joins, simplifying queries, and improving read and write operations in scenarios where data redundancy and potential update anomalies can be managed effectively by application logic or database constraints. It is a technique that should be carefully implemented based on the specific needs and performance goals of the database application.','Expert',' How does database denormalization improve performance? ',' Normalization and Data Organization '),(363,'SQL databases are relational, enforce a structured schema, use SQL for querying, and offer ACID transactions. They are suitable for applications with complex queries, strict consistency requirements, and structured data.\n\nNoSQL databases are non-relational, have flexible schemas, use varied query languages, and prioritize scalability and performance over strict consistency. They are ideal for applications with large-scale data requirements, dynamic or unstructured data, and distributed architectures.\n\nChoosing between SQL and NoSQL databases depends on factors such as the nature of the data, scalability needs, performance requirements, and the complexity of queries and transactions expected in the application. Many modern applications use a combination of both SQL and NoSQL databases (polyglot persistence) to leverage the strengths of each for different use cases within the same system.','Expert',' Describe the difference between SQL and NoSQL databases. ',' SQL and NoSQL Databases '),(364,' NoSQL databases are flexible and can handle large volumes of unstructured data... ','Intermediate',' What are some advantages of using NoSQL databases? ',' SQL and NoSQL Databases '),(365,' SQL is a query language used to communicate with databases... ','Intermediate',' Describe the difference between SQL and PL/SQL. ',' SQL and NoSQL Databases '),(366,' Common types of joins include INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN... ','Intermediate',' What are some common types of database joins? ',' Joins and Query Optimization '),(367,'Optimizing SQL queries is crucial for improving database performance and ensuring efficient data retrieval. Here are several techniques and best practices to optimize SQL queries:\n\n### 1. **Use Indexes**:\n   - **Create Indexes**: Identify columns frequently used in WHERE, JOIN, and ORDER BY clauses, and create appropriate indexes. Indexes help the database engine locate data quickly.\n   - **Types of Indexes**: Consider using clustered and non-clustered indexes based on the query patterns and data access requirements.\n\n### 2. **Optimize SELECT Statements**:\n   - **Fetch Only What You Need**: Retrieve only the necessary columns using SELECT rather than using SELECT *.\n   - **Avoid SELECT DISTINCT**: Use it only when necessary, as it can be resource-intensive.\n   - **Avoid Wildcards**: Avoid using wildcards (%) at the beginning of LIKE queries as it prevents the use of indexes.\n\n### 3. **Write Efficient Joins**:\n   - **Choose the Right Join Type**: Use the appropriate join type (INNER JOIN, LEFT JOIN, RIGHT JOIN) based on the relationship between tables and the data you need.\n   - **Avoid Cartesian Products**: Ensure join conditions are correct to avoid unintentional Cartesian products, where every row in one table is joined with every row in another.\n\n### 4. **Filter and Sort Data Efficiently**:\n   - **Use WHERE Clause**: Filter rows early in the query using WHERE clause to reduce the dataset size.\n   - **Avoid Functions in WHERE**: Avoid using functions (like DATE functions) in the WHERE clause on indexed columns, as it can prevent index usage.\n   - **Use ORDER BY Wisely**: Use ORDER BY only when necessary, and ensure indexed columns are used for sorting to optimize performance.\n\n### 5. **Limit and Offset Results**:\n   - **LIMIT Results**: Use LIMIT (or equivalent) to restrict the number of rows returned, especially for paginated results.\n   - **Avoid OFFSET**: OFFSET can be slow for large datasets; consider alternatives like keyset pagination.\n\n### 6. **Optimize Subqueries and CTEs**:\n   - **Use EXISTS Instead of IN**: Prefer EXISTS clause over IN for subqueries, as EXISTS can often be optimized better by the database engine.\n   - **Use CTEs (Common Table Expressions)**: Use CTEs to simplify complex queries and improve readability, but ensure they are optimized with appropriate indexes and join conditions.\n\n### 7. **Monitor and Tune Queries**:\n   - **Use Database Tools**: Utilize database query execution plans and profiling tools to analyze query performance.\n   - **Identify and Resolve Bottlenecks**: Monitor slow queries and identify bottlenecks such as full table scans, excessive joins, or missing indexes.\n\n### 8. **Database Design Considerations**:\n   - **Normalize Data**: Normalize your database schema to reduce redundancy and improve data integrity, but balance it with denormalization where performance benefits outweigh normalization.\n   - **Partition Large Tables**: Partition large tables into smaller ones based on usage patterns to improve query performance.\n\n### 9. **Optimize Application Design**:\n   - **Reduce Round-Trips**: Minimize the number of database round-trips by batching queries or using stored procedures.\n   - **Cache Query Results**: Use caching mechanisms in your application layer to store and reuse query results where appropriate.\n\n### 10. **Review and Refactor Regularly**:\n   - **Review Execution Plans**: Regularly review query execution plans to identify opportunities for optimization and performance tuning.\n   - **Refactor Queries**: Refactor complex queries into simpler ones or break them down into smaller, more manageable parts.\n\nBy applying these optimization techniques, you can significantly enhance the performance of SQL queries, reduce response times, and improve the overall efficiency of your database applications. Always benchmark and test optimizations in a controlled environment to ensure they deliver expected improvements without compromising data integrity or application functionality.','Expert',' How can you optimize a SQL query? ',' Joins and Query Optimization '),(368,' A subquery is a query nested within another query... ','Intermediate',' Explain the concept of a subquery in SQL. ',' Joins and Query Optimization '),(369,' The GROUP BY clause is used to group rows that have the same values... ','Beginner',' What is the purpose of the GROUP BY clause in SQL? ',' Joins and Query Optimization '),(370,' Data warehousing involves collecting and storing data from various sources... ','Intermediate',' Explain the concept of data warehousing. ',' Data Warehousing and Mining '),(371,' Data mining involves discovering patterns and insights from large datasets... ','Intermediate',' Explain the concept of data mining. ',' Data Warehousing and Mining '),(372,'The CAP theorem asserts that in a distributed system, you can optimize for at most two out of these three guarantees, but not all three simultaneously.\nConsistency and Availability: If you optimize for consistency and availability (CA), your system sacrifices partition tolerance. This means that if there is a network partition, you must choose either consistency or availability.\nAvailability and Partition Tolerance: If you optimize for availability and partition tolerance (AP), your system may sacrifice consistency. In this case, during a network partition, the system can continue to accept requests and operate, but it may provide stale data or divergent views.\nConsistency and Partition Tolerance: If you optimize for consistency and partition tolerance (CP), your system sacrifices availability. This means that during a network partition, the system maintains consistency by refusing to respond to some requests.\nPractical Implications:\nDatabase Design: The CAP theorem influences the design and architecture of distributed databases. For example, relational databases (like SQL databases) typically prioritize consistency and availability (CA), while NoSQL databases often prioritize availability and partition tolerance (AP).\nTrade-offs: System architects must carefully consider the trade-offs between consistency, availability, and partition tolerance based on the specific requirements and constraints of their applications.\nReal-world Applications: Understanding the CAP theorem helps in designing distributed systems that can handle failures and provide the desired level of reliability and performance under various conditions.\nWhile the CAP theorem provides a theoretical framework, in practice, various techniques and compromises, such as eventual consistency models or hybrid approaches, are used to achieve a balance between these conflicting guarantees in distributed systems.','Expert',' What is the CAP theorem? ',' Advanced Database Concepts '),(373,'Database sharding is a technique used to improve the scalability of databases by horizontally partitioning data across multiple servers or nodes. Here’s how database sharding enhances scalability:\n\n### 1. **Horizontal Partitioning**:\n   - **Data Distribution**: Sharding involves dividing a large database into smaller, more manageable parts called shards. Each shard contains a subset of data based on a sharding key or criteria.\n   - **Distribution Across Nodes**: These shards are distributed across multiple database servers or nodes, rather than storing all data on a single server.\n\n### 2. **Improved Performance**:\n   - **Reduced Data Size per Node**: By distributing data across multiple nodes, each node (or shard) handles a smaller subset of the overall data. This reduces the amount of data each server needs to manage and query, which can lead to improved query performance.\n   - **Parallel Query Execution**: Queries can be executed in parallel across different shards, leveraging the processing power of multiple servers simultaneously. This parallelism enhances the overall throughput and reduces latency for data retrieval operations.\n\n### 3. **Scalability**:\n   - **Elastic Scalability**: Sharding enables elastic scalability by adding more nodes or shards as the database workload grows. This horizontal scaling approach allows the database to handle increased traffic and data volume without requiring substantial upgrades to individual servers.\n   - **Load Balancing**: Sharding facilitates load balancing by evenly distributing the workload across multiple nodes. This helps in preventing any single server from becoming a bottleneck and ensures efficient resource utilization.\n\n### 4. **Fault Isolation and Resilience**:\n   - **Isolation of Failures**: Sharding provides fault isolation, meaning that a failure in one shard or node does not necessarily affect the entire database system. Other shards continue to function normally, maintaining availability and data access for unaffected parts of the database.\n   - **Improved Availability**: Distributed databases with sharding can achieve higher availability by replicating data across multiple nodes within each shard. This redundancy ensures that data remains accessible even if one or more nodes experience failures.\n\n### 5. **Challenges and Considerations**:\n   - **Sharding Strategy**: Designing an effective sharding strategy involves choosing an appropriate sharding key that evenly distributes data and queries across shards.\n   - **Consistency**: Ensuring consistency across shards (especially during updates and transactions) requires careful planning and may involve trade-offs between consistency and performance.\n   - **Operational Complexity**: Managing a sharded database system introduces additional operational complexity, such as monitoring, data rebalancing, and schema changes across shards.\n\nIn summary, database sharding improves scalability by horizontally partitioning data, distributing workload across multiple nodes, enabling parallel query execution, and providing fault isolation. It is a powerful technique for scaling databases to handle large volumes of data and high transaction rates in distributed and cloud-based environments.','Expert',' How does database sharding improve scalability? ',' Advanced Database Concepts '),(374,'Database partitioning is a technique used to divide large tables and indexes into smaller, more manageable parts called partitions. Each partition contains a subset of the data based on a partitioning key or criteria. Here’s an overview of the concept and benefits of database partitioning:\n\n### Concept of Database Partitioning:\n\n1. **Partitioning Key**:\n   - **Definition**: A partitioning key is a column or set of columns chosen to determine how data is divided into partitions. It could be based on a range of values (e.g., dates), a hash value, or another logical criterion.\n   - **Example**: For a sales database, partitioning by date might involve creating monthly partitions where each partition holds data for a specific month.\n\n2. **Types of Database Partitioning**:\n   - **Range Partitioning**: Data is partitioned based on ranges defined by a column\'s values (e.g., partition by date ranges).\n   - **Hash Partitioning**: Data is distributed across partitions using a hash function applied to a partitioning key (e.g., partition by a hashed value of customer ID).\n   - **List Partitioning**: Data is partitioned based on specific values defined in lists (e.g., partition by region where each partition holds data for a specific region).\n   - **Composite Partitioning**: Combines multiple partitioning methods, such as range-hash partitioning, to accommodate complex partitioning needs.\n\n3. **Benefits of Database Partitioning**:\n\n   - **Improved Performance**: Partitioning improves query performance by reducing the amount of data that needs to be scanned. Queries can target specific partitions rather than the entire table, leading to faster query execution times.\n   - **Enhanced Manageability**: Partitioning allows for easier management of large datasets. Operations such as data loading, backup, and maintenance can be performed on individual partitions rather than the entire table.\n   - **Scalability**: Database partitioning supports horizontal scalability by distributing data across multiple physical storage devices or servers. As data volume grows, additional partitions can be added to accommodate increased storage and processing requirements.\n   - **Increased Availability**: Partitioning enhances fault tolerance and availability. If a partition or server fails, the remaining partitions continue to function, ensuring that data remains accessible with minimal disruption.\n   - **Optimized Data Storage**: Partitioning can optimize storage resources by placing frequently accessed or hot data on faster storage devices or disks, while less frequently accessed data can reside on slower or cheaper storage.\n\n4. **Considerations**:\n\n   - **Partitioning Strategy**: Choosing the right partitioning key and strategy is crucial for achieving optimal performance and scalability. Factors such as query patterns, data distribution, and maintenance operations should be considered.\n   - **Query Optimization**: Queries should be designed to leverage partitioning for optimal performance. Understanding how data is distributed across partitions helps in designing efficient queries.\n   - **Operational Overhead**: Implementing and managing partitioned databases may introduce additional complexity in terms of administration, monitoring, and maintenance tasks.\n\nIn summary, database partitioning is a powerful technique for improving performance, scalability, and manageability in large-scale database systems. By dividing data into smaller partitions based on defined criteria, partitioning enhances query performance, supports horizontal scaling, and ensures efficient data management and availability.','Expert',' Describe the concept of database partitioning. ',' Advanced Database Concepts '),(375,' A self join is a regular join, but the table is joined with itself... ','Intermediate',' What is a self join in SQL? ',' Advanced Database Concepts '),(376,' A view is a virtual table that consists of columns from one or more tables... ','Beginner',' What is a view in a database? ',' Advanced Database Concepts '),(377,' A table stores data in rows and columns, whereas a view is a virtual table... ','Beginner',' What is the difference between a view and a table? ',' Advanced Database Concepts '),(378,' A stored procedure is a prepared SQL code that you can save... ','Beginner',' What is a stored procedure and why would you use it? ',' Advanced Database Concepts '),(379,' A trigger is a special type of stored procedure that automatically executes... ','Intermediate',' Describe the difference between a trigger and a stored procedure. ',' Advanced Database Concepts '),(380,' A composite key is a combination of two or more columns that uniquely identify a record... ','Intermediate',' Explain the concept of a composite key. ',' Advanced Database Concepts ');
/*!40000 ALTER TABLE `question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` bigint NOT NULL AUTO_INCREMENT,
  `created_at` datetime(6) DEFAULT NULL,
  `updated_at` datetime(6) DEFAULT NULL,
  `version` bigint NOT NULL,
  `email` varchar(50) NOT NULL,
  `first_login` tinyint(1) NOT NULL DEFAULT '1',
  `last_login_on` datetime(6) NOT NULL,
  `password` varchar(50) NOT NULL,
  `status` varchar(10) NOT NULL DEFAULT 'INACTIVE',
  `user_name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UKk8d0f2n7n88w1a16yhua64onx` (`user_name`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'2024-12-23 11:02:33.000000','2024-12-23 11:02:33.000000',1,'test',0,'2024-12-23 11:02:33.000000','t','A','test');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-12-24 22:36:08
